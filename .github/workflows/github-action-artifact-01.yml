# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: App With Github Actions CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Naming jar file
      run: mv ./target/*.jar ./target/app.jar

    - name: Check jar file
      run: ls ./target

    - uses: actions/upload-artifact@v4
      name: Upload Jar Artifact
      with:
        name: app.jar
        path: ./target/*.jar

  cd:
    needs: ci
    runs-on: ubuntu-latest

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: app
    
    - name: Jar Artifact move from Github Actions to AWS EC2 through SCP
      uses: appleboy/scp-action@v0.1.7
      with: 
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: ./target/app.jar
        target: /home/ubuntu/app

    - name: Connecting EC2 through SSH And Execute Deployment Script
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script_stop: true
        script: |
           rm -rf /home/ubuntu/app/deploy
           mkdir /home/ubuntu/app/deploy
           mv /home/ubuntu/app/target/app.jar /home/ubuntu/app/deploy/app.jar
           cd /home/ubuntu/app/deploy
           sudo fuser -k -n tcp 8080 || true
           nohup java -jar app.jar > ./output.log 2>&1 &
           rm -rf /home/ubuntu/app/target
